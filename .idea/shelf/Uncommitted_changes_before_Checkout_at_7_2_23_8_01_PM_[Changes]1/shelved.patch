Index: src/str_cmp.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//==================================================================================\n// BSD 2-Clause License\n//\n// Copyright (c) 2014-2022, NJIT, Duality Technologies Inc. and other contributors\n//\n// All rights reserved.\n//\n// Author TPOC: contact@openfhe.org\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n// 1. Redistributions of source code must retain the above copyright notice, this\n//    list of conditions and the following disclaimer.\n//\n// 2. Redistributions in binary form must reproduce the above copyright notice,\n//    this list of conditions and the following disclaimer in the documentation\n//    and/or other materials provided with the distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//==================================================================================\n\n/*\n  Example for the FHEW scheme using the default bootstrapping method (GINX)\n */\n\n#include \"binfhecontext.h\"\n#include \"str_cmp.h\"\n\nusing namespace lbcrypto;\nLWECiphertext byte_comp(LWECiphertext b1[8], LWECiphertext b2[8], ConstLWEPrivateKey sk, BinFHEContext cc){\n\tauto check = cc.Encrypt(sk, 1);\n\tfor(int i = 0 ;i < 8; i++){\n\t\tauto temp = cc.EvalBinGate(XNOR, b1[i], b2[i]);\n\t\tcheck = cc.EvalBinGate(AND, check, temp);\t\n\t}\n\treturn check;\n}\nLWECiphertext str_comp(LWECiphertext s1[8][8], LWECiphertext s2[8][8], ConstLWEPrivateKey sk, BinFHEContext cc){\n\tauto check = cc.Encrypt(sk, 1);\n\tfor(int i = 0 ;i < 8; i++){\n\t\tauto temp = byte_comp(s1[i], s2[i], sk, cc);\n\t\tcheck = cc.EvalBinGate(AND, check, temp);\t\n\t}\n\treturn check;\n}\n/*\nint main() {\n    // Sample Program: Step 1: Set CryptoContext\n\n    auto cc = BinFHEContext();\n\n    // STD128 is the security level of 128 bits of security based on LWE Estimator\n    // and HE standard. Other common options are TOY, MEDIUM, STD192, and STD256.\n    // MEDIUM corresponds to the level of more than 100 bits for both quantum and\n    // classical computer attacks.\n    cc.GenerateBinFHEContext(STD128);\n\n    // Sample Program: Step 2: Key Generation\n\n    // Generate the secret key\n    auto sk = cc.KeyGen();\n\n    std::cout << \"Generating the bootstrapping keys...\" << std::endl;\n\n    // Generate the bootstrapping keys (refresh and switching keys)\n    cc.BTKeyGen(sk);\n\n    std::cout << \"Completed the key generation.\" << std::endl;\n    \n    // Sample Program: Step 3: Encryption\n    \n    // Encrypt two ciphertexts representing Boolean True (1).\n    // By default, freshly encrypted ciphertexts are bootstrapped.\n    // If you wish to get a fresh encryption without bootstrapping, write\n    // auto   ct1 = cc.Encrypt(sk, 1, FRESH);\n    //auto ct1 = cc.Encrypt(sk, 1);\n    //auto ct2 = cc.Encrypt(sk, 0);\n\n    // Sample Program: Step 4: Evaluation\n\n    // Compute (1 AND 1) = 1; Other binary gate options are OR, NAND, and NOR\n    //auto ctAND1 = cc.EvalBinGate(AND, ct1, ct2);\n\n    // Compute (NOT 1) = 0\n    //auto ct2Not = cc.EvalNOT(ct2);\n\n    // Compute (1 AND (NOT 1)) = 0\n    //auto ctAND2 = cc.EvalBinGate(AND, ct2Not, ct1);\n\n    // Computes OR of the results in ctAND1 and ctAND2 = 1\n    //auto ctResult = cc.EvalBinGate(OR, ctAND1, ctAND2);\n    //auto ctResult = cc.EvalBinGate(XNOR, ct1, ct2);\n    //auto ctResult2 = cc.EvalBinGate(XOR, ct1, ctResult);\n    // Sample Program: Step 5: Decryption\n\n    LWEPlaintext result[16];\n    for(int i = 0;i < 16; i++){\n    \tcc.Decrypt(sk, ct[i], &result[i]);\n    \tstd:: cout << result[i] << \" \";\n    }\n    std:: cout << std::endl; \n    ///std::cout << \"Result of encrypted computation of (1 AND 1) OR (1 AND (NOT 1)) = \" << result << std::endl;\n    bool str1[8][8], str2[8][8];\n    for(int i = 0;i < 8; i++){\n    \tfor(int j = 0;j < 8; j++){\n    \t\tif(i % 2){\n    \t\t\tstr1[i][j] = 1;\n    \t\t\tstr2[i][j] = 1;\n    \t\t}\n    \t\telse {\n    \t\t\tstr1[i][j] = 0;\n    \t\t\tstr2[i][j] = 0;\n    \t\t}\n    \t}\n    }\n    str2[6][5] = 1;\n  \n    LWECiphertext c1[8][8], c2[8][8];\n    for(int i = 0;i < 8; i++){\n    \tfor(int j = 0;j < 8; j++){\n    \t\tc1[i][j] = cc.Encrypt(sk,str1[i][j]);\n    \t\tc2[i][j] = cc.Encrypt(sk,str2[i][j]);\n    \t}\n    }\n    \n    auto res = str_comp(c1, c2, sk, cc);\n    LWEPlaintext result;\n    cc.Decrypt(sk, res, &result);\n    std:: cout << result << std::endl;\n    \n    return 0;\n}*/\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/str_cmp.cpp b/src/str_cmp.cpp
--- a/src/str_cmp.cpp	(revision 961c14990d6de8c3294dccc2202f983be34643a8)
+++ b/src/str_cmp.cpp	(date 1688328099253)
@@ -1,38 +1,3 @@
-//==================================================================================
-// BSD 2-Clause License
-//
-// Copyright (c) 2014-2022, NJIT, Duality Technologies Inc. and other contributors
-//
-// All rights reserved.
-//
-// Author TPOC: contact@openfhe.org
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are met:
-//
-// 1. Redistributions of source code must retain the above copyright notice, this
-//    list of conditions and the following disclaimer.
-//
-// 2. Redistributions in binary form must reproduce the above copyright notice,
-//    this list of conditions and the following disclaimer in the documentation
-//    and/or other materials provided with the distribution.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
-// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
-// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-//==================================================================================
-
-/*
-  Example for the FHEW scheme using the default bootstrapping method (GINX)
- */
-
 #include "binfhecontext.h"
 #include "str_cmp.h"
 
